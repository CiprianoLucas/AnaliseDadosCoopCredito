# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-KoKHVxJFa3dM_AKSL7x3uJHIf8C0sox

Importar as bibliotecas e bancos de dados
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats


base_carteira = pd.read_csv('/content/base_carteira.csv',  encoding="iso8859-1", sep = ';')
base_originacao = pd.read_csv('/content/base_originacao.csv',  encoding="iso8859-1", sep = ';')

"""Visualizar as tabelas"""

display(base_unificada)

"""Transformando as colunas em valores para se trabalhar mais tranquilamente"""

base_carteira["VLPROVISAO"] = base_carteira["VLPROVISAO"].str.replace('.', '').str.replace(',', '.').astype(float)
base_carteira["SDATRASO"] = base_carteira["SDATRASO"].str.replace('.', '').str.replace(',', '.').astype(float)
base_carteira["SDDEVEDOR"] = base_carteira["SDDEVEDOR"].str.replace('.', '').str.replace(',', '.').astype(float)
base_carteira["VLCONTRATO"] = base_carteira["VLCONTRATO"].str.replace('.', '').str.replace(',', '.').astype(float)
base_carteira['DTBASE'] = pd.to_datetime(base_carteira['DTBASE'], format='%d/%m/%Y')
base_carteira['DTCONTRATO'] = pd.to_datetime(base_carteira['DTCONTRATO'], format='%d/%m/%Y')
base_carteira['CPF'] = base_carteira['CPF'].astype(str)

base_originacao["VLCONTRATO"] = base_originacao["VLCONTRATO"].str.replace('.', '').str.replace(',', '.').astype(float)
base_originacao["VLPARCELA"] = base_originacao["VLPARCELA"].str.replace('.', '').str.replace(',', '.').astype(float)
base_originacao['DTCONTRATO'] = pd.to_datetime(base_originacao['DTCONTRATO'], format='%d/%m/%Y')
base_originacao['CPF'] = base_originacao['CPF'].astype(str)

"""Verificando se algum contrato se repete no base_originacao"""

print(base_originacao['CONTA'].loc[base_originacao['CONTA'].duplicated()])

"""Como não se repete, pode-se usar como chave primária e dropar as demais colunas que se repetem"""

base_drop = base_originacao.drop(columns=['COOPERATIVA','CPF','CONTA','DSPRODUTO','DTCONTRATO','VLCONTRATO'])

base_unificada = pd.merge(base_carteira, base_drop, on='CONTRATO', how='left')

"""Em uma visão geral da base “base_originacao.csv”, calcule a quantidade de dias distintos DTCONTRATO e a soma dos VLCONTRATO dos contratos originados. Aproveitando e efetuando um gráfico com base no valor total dos contratos por mês."""

valor_dia = pd.DataFrame(base_originacao.groupby('DTCONTRATO').agg({'DTCONTRATO':'first','VLCONTRATO':'sum'})) #filtrando apenas as informações importantes e agrupando por DTCONTRATO
valor_dia = valor_dia.rename(columns={'VLCONTRATO': 'TOTAL'}) #renomenando
valor_dia = valor_dia.rename(columns={'DTCONTRATO': 'MES/ANO'}) #renomenando
valor_dia['TOTAL'] = valor_dia['TOTAL'].round(2) #arredondando total
valor_dia['MES/ANO'] = valor_dia['MES/ANO'].dt.strftime('%m/%Y') #coletando mes e ano

valor_mes = pd.DataFrame(valor_dia.groupby('MES/ANO').agg({'MES/ANO':'first','TOTAL':'sum'})) #agrupando por mes/ano
valor_mes['ANO'] = valor_mes['MES/ANO'].str[-4:] #criando coluna ano
valor_mes['MES'] = valor_mes['MES/ANO'].str[:2] #criano coluna mes
valor_mes = valor_mes.sort_values(by=['ANO','MES']) #ordenando do por mes e ano

total =  f'{valor_dia["TOTAL"].sum():,.2f}'.replace('.', '_').replace(',', '.').replace('_', ',') #transformando valor para o real brasileiro

#imprimindo valores
display(f'O número total de dias onde houve contrato é {valor_dia.shape[0]}')
display(f'Somados no valor de R${total}')

display(valor_dia)
valor_mes.plot(x="MES/ANO", y="TOTAL", kind='line', marker='o', linestyle='-')
plt.xlabel('MES/ANO')
plt.ylabel('VALOR')
plt.title('VALOR TOTAL DE CONTRATOS POR DIA')

"""Para DTBASE=31/12/2021 da base “base_carteira.csv”, faça a soma dos SDDEVEDOR e a média simples de QTDIASATRASO.

Para a Cooperativa A, obtenha a relação dos 10 CPFs com maiores Saldos Devedor para a data de referência 30/09/2021, em que os CPFs apresentam algum atraso maior que zero
"""

data_escolhida = '30/09/2021' #escolhendo a data de consulta
cooperativa_avaliada = 'A' #escolhendo a cooperativa
dados_dia = base_carteira[base_carteira['DTBASE'] == pd.to_datetime(data_escolhida, format='%d/%m/%Y')] #coletando todos os dados do dia escolhido
dados_dia_atradados = dados_dia[dados_dia['QTDIASATRASO'] != 0] #Coletando os dados somente de quem está atrasado
dados_dia_atrasados_coop = dados_dia_atradados[dados_dia_atradados['COOPERATIVA'] == cooperativa_avaliada] #pegando os atrasados da cooperativa escolhida
devedores_atradados = pd.DataFrame(dados_dia_atrasados_coop.groupby('CPF').agg({'CPF':'first','SDDEVEDOR':'sum'})) #efetuando a soma dos valores devido dos CPFs
maiores_devedores_atrasados = devedores_atradados.nlargest(10, 'SDDEVEDOR') #identificando os 10 com maiores valores devidos



n_atrasados = dados_dia_atradados.shape[0] #descobrindo total de atradados no sistema
n_em_dia = dados_dia.shape[0]-n_atrasados #descobrindo quantos estão em dia

#construção do gráfico de pizza
pizza_atrasados = {
    'Categorias': ['ATRASADOS', 'EM DIA'],
    'Valores': [n_atrasados, n_em_dia]
}

pizza_atrasados = pd.DataFrame(pizza_atrasados)

pizza_atrasados.plot(kind='pie', y='Valores', labels=pizza_atrasados['Categorias'], autopct='%1.1f%%', startangle=90)
plt.title('RELAÇÃO DE COOPERADOS ATRASADOS')
plt.axis('equal')

#preparando as mensagens dos resultados
soma_dia = f'{dados_dia["SDDEVEDOR"].sum():,.2f}'.replace('.', '_').replace(',', '.').replace('_', ',')
media_dias = f'{dados_dia["QTDIASATRASO"].mean():,.2f}'
media_dias_atrasados = f'{dados_dia_atradados["QTDIASATRASO"].mean():,.2f}'

print(f"Soma do saldo devedor para data {data_escolhida}: R${soma_dia}")
print(f"Média de dias de atraso para data {data_escolhida}: {media_dias} (considerando os que não estão em atraso)")
print(f"Média de dias de atraso para data {data_escolhida}: {media_dias_atrasados} (somente entre os atrasados)")

#preparando gráfico de barras
plt.show()


plt.figure(figsize=(10, 6))

plt.bar(maiores_devedores_atrasados['CPF'], maiores_devedores_atrasados['SDDEVEDOR'])
plt.xlabel('CPF')
plt.ylabel('VALOR DEVIDO')
plt.title('Pessoas que Mais Devem')

plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.show()

#mostrando tabelas
# display(dados_dia)
# display(dados_dia_atradados)
# display(dados_dia_atrasados_coop)
# display(maiores_devedores_atrasados)

"""Em uma visão mensal (DTBASE), gere uma tabela consolidada de carteira, com ordenação crescente pela DTBASE, com as seguintes informações:
•	datas bases
•	quantidade de cooperativas distintas
•	quantidade de CPFs distintos
•	soma do saldo devedor
•	média dos dias de atraso
•	média da quantidade de parcelas
•	menor data de originação dos contratos
•	contrato com maior número de parcelas
•	prazo médio ponderado dos contratos (valor da originação e quantidade de parcelas)
•	taxa de contratos com atrasos > 90 dias
•	taxa de saldo devedor com atrasos > 90 dias


"""

visao_mensal = ({
    'DATA': [],             #datas bases
    'NCOOP': [],            #quantidade de cooperativas distintas
    'NCPF': [],             #quantidade de CPFs distintos
    'SUMDEVEDOR': [],       #soma do saldo devedor
    'AVGATRASO': [],        #média dos dias de atraso
    'AVGPARCELAS': [],      #média da quantidade de parcelas
    'MENCONTRATO': [],      #menor data de originação dos contratos
    'MAIPARCELAS': [],      #contrato com maior número de parcelas
    'AVGPCONTRATO': [],     #prazo médio ponderado dos contratos (valor da originação e quantidade de parcelas)
    'TCONTRATOSMAI90': [],  #taxa de contratos com atrasos > 90 dias
    'TSALDOATRASO': []      #taxa de saldo devedor com atrasos > 90 dias
})

lista_dias = base_unificada['DTBASE'].astype(str).unique().tolist() #colocando as datas em uma lista

#descobrindo quantas parcelas faltam pagar, infelizmente não foi possível identificar o número exato
#pois existe mais fatores envolvidos como, data inicio pagamento, taxas envolvidas, atrasos e negociações.
diferenca_meses = (base_unificada['DTBASE'] - base_unificada['DTCONTRATO']).dt.days / 30.41

base_unificada["PARCELASPDTS"] = np.where(diferenca_meses <= base_unificada['QTPARCELAS'],
                                          base_unificada['QTPARCELAS'] - round(diferenca_meses),
                                          0)

#criando loop para fazer as condições para cada data
for data in lista_dias:
 base_filtro_data = base_unificada[base_unificada['DTBASE'] == data] #filtrando as informações da data

 data_visao_mensal = f'{data[8:10]}/{data[5:7]}/{data[0:4]}' #coletando a data
 ncoop_visao_mensal = base_filtro_data['COOPERATIVA'].nunique() #coletando número de cooperativas
 ncpf_visao_geral =  base_filtro_data['CPF'].nunique() #coletando número de CPFs
 sumdevedor_visao_mensal = f'R${base_filtro_data["SDDEVEDOR"].sum():,.2f}'.replace('.', '_').replace(',', '.').replace('_', ',') #coletando soma do saldo devedor

 base_filtro_data_devedores = base_filtro_data[base_filtro_data['QTDIASATRASO'] != 0] #filtrando os atrasados
 avgatraso_visao_geral = base_filtro_data_devedores['QTDIASATRASO'].mean() #média de dias atrasados

 avgparcelas_visao_geral = base_filtro_data['PARCELASPDTS'].mean() #média de parcelas pendentes
 mencontrato_visao_geral = base_filtro_data['DTCONTRATO'].min() #data do contrato mais antigo do mês
 maiparcelas_visao_geral = base_filtro_data['PARCELASPDTS'].max() #contrato com maior número de parcelas pendentes

 base_unificada["PARCELASPDTS"]["PESOPARCELA"] = base_unificada["VLCONTRATO"]/base_filtro_data['VLCONTRATO'].sum()

 base_filtro_data_devedores = base_filtro_data[base_filtro_data['QTDIASATRASO'] > 90] #pegando dados dos devedores com mais de 90 dias de atrado

 n_atrasados90 = base_filtro_data_devedores.shape[0] #coletando numero de atradados
 tcontratomais90_visao_mensal = f'{round((n_atrasados90*100)/base_filtro_data.shape[0],2)}%' #verificando a porcentagem de atrasados

 tsaldoatraso_visao_mensal = f'{round(base_filtro_data_devedores["SDATRASO"].sum()*100/base_filtro_data["SDDEVEDOR"].sum(),2)}%' #verificando a taxa percentual de atrasados

 base_filtro_data["PESO"] = base_filtro_data['PARCELASPDTS'] * base_filtro_data['SDDEVEDOR']  #fazendo peso de comparação da média ponderada

 avgpcontrato = f'{round(base_filtro_data["PESO"].sum() / base_filtro_data["SDDEVEDOR"].sum(),1)} dias' #tirando média ponderada

#Inserindo na tabela
 visao_mensal['DATA'].append(data_visao_mensal)
 visao_mensal['NCOOP'].append(ncoop_visao_mensal)
 visao_mensal['NCPF'].append(ncpf_visao_geral)
 visao_mensal['SUMDEVEDOR'].append(sumdevedor_visao_mensal)
 visao_mensal['AVGATRASO'].append(avgatraso_visao_geral)
 visao_mensal['AVGPARCELAS'].append(avgparcelas_visao_geral)
 visao_mensal['MENCONTRATO'].append(mencontrato_visao_geral)
 visao_mensal['MAIPARCELAS'].append(maiparcelas_visao_geral)
 visao_mensal['AVGPCONTRATO'].append(avgpcontrato)
 visao_mensal['TCONTRATOSMAI90'].append(tcontratomais90_visao_mensal)
 visao_mensal['TSALDOATRASO'].append(tsaldoatraso_visao_mensal)

#Mostrando tabela
display(pd.DataFrame(visao_mensal))

"""Em uma visão mensal (DTBASE), para o atributo QTPARCELAS, crie uma tabela contendo a Moda, e para o atributo SDDEVEDOR obtenha a Média e o Intervalo de Confiança para a média com nível de 99%. Unifique os resultados em uma única tabela. Além, escolha um mês para interpretar os resultados obtidos."""

#Criando tabela
visao_mensal_2 = ({
    'DATA': [],
    'MODA': [],
    'MEDIA': [],
    'INTERVALOMIN': [],
    'INTERVALOMAX': [],
})

#loop para cada data
for data in lista_dias:

  base_filtro_data_2 = base_unificada[base_unificada['DTBASE'] == data] #coletando informações da data
  data_visao_mensal_2 = f'{data[8:10]}/{data[5:7]}/{data[0:4]}' #formatando data para o padrão brasileiro
  moda_mensal_2 = base_filtro_data_2['QTPARCELAS'].mode().values[0] #coletando a moda
  media_mensal_2 = f'R${base_filtro_data_2["SDDEVEDOR"].mean():,.2f}'.replace('.', '_').replace(',', '.').replace('_', ',') # coletando média e aplicando padrão real brasileiro
  #gerando os valores de intevalo mínimo e máximo
  intervalomin_mensal_2, intervalomax_mensal_2 = stats.t.interval(0.99, len(base_filtro_data_2['SDDEVEDOR']) - 1,
                                                               loc=base_filtro_data_2['SDDEVEDOR'].mean(),
                                                               scale=stats.sem(base_filtro_data_2['SDDEVEDOR']))

#modificando intervalos para real brasileiro
  intervalomin_mensal_2 = f'R${intervalomin_mensal_2:,.2f}'.replace('.', '_').replace(',', '.').replace('_', ',')
  intervalomax_mensal_2 = f'R${intervalomax_mensal_2:,.2f}'.replace('.', '_').replace(',', '.').replace('_', ',')

#inserindo na tabela os dados
  visao_mensal_2['DATA'].append(data_visao_mensal_2)
  visao_mensal_2['MODA'].append(moda_mensal_2)
  visao_mensal_2['MEDIA'].append(media_mensal_2)
  visao_mensal_2['INTERVALOMIN'].append(intervalomin_mensal_2)
  visao_mensal_2['INTERVALOMAX'].append(intervalomax_mensal_2)

#imprimindo dados
display(pd.DataFrame(visao_mensal_2))



"""Vamos utilizar o mês de maio como comparação aos demais, o mês apresentou uma variação maior dos valores e também uma média mais elevada. Mas isso pode ser ocasionado pelo número inferior de dados com base nos demais meses conforme já visto nas tabelas anteriores. Também não existe dados de uma cooperativa, o que também influencia diretamente nos valores finais.

Identifique o volume de contratos (por cooperativa) que estão em 31/jul/2021 e que não estão em 31/ago/2021. Utilize como chaves: COOPERATIVA, CPF, CONTA, CONTRATO, DSPRODUTO, DTCONTRATO e VLCONTRATO
"""

dia_comparacao_A = '31/07/2021' #escolhendo data A
dia_comparacao_B = '31/08/2021' #escolhendo data B

#criando tabela
comparacao = ({
    'COOPERATIVA': [],
    'DATAA': [],
    'NCONTRATOSDA': [],
    'DATAB': [],
    'NCONTRATOSDB': [],
    'FALTANTES': []
})

cooperativas = base_unificada['COOPERATIVA'].astype(str).unique().tolist() #colocando cooperativas em uma lista

#buscando dados referente cada data escolhida
dados_dia_A = base_unificada[base_unificada['DTBASE'] == pd.to_datetime(dia_comparacao_A, format='%d/%m/%Y')]
dados_dia_B = base_unificada[base_unificada['DTBASE'] == pd.to_datetime(dia_comparacao_B, format='%d/%m/%Y')]

#loop para cada cooperativa
for cooperativa in cooperativas:

  #coletando as informações para cada cooperativa
  constratosda = dados_dia_A[dados_dia_A['COOPERATIVA'] == cooperativa]
  constratosdb = dados_dia_B[dados_dia_B['COOPERATIVA'] == cooperativa]

  #descobrindo número de contratos do dia
  nconstratosda = constratosda.shape[0]
  nconstratosdb = constratosdb.shape[0]

  faltantes = constratosda.merge(constratosdb, on='CONTRATO', how='left') #mesclando uma tabela na outra para comparar as que se repetem
  nfaltantes = faltantes[faltantes['CONTA_y'].isnull()].shape[0] #as que não se repetem são contadas e mostra quantas não se repetem

#inserindo informações na tabela
  comparacao['COOPERATIVA'].append(cooperativa)
  comparacao['DATAA'].append(dia_comparacao_A)
  comparacao['NCONTRATOSDA'].append(nconstratosda)
  comparacao['DATAB'].append(dia_comparacao_B)
  comparacao['NCONTRATOSDB'].append(nconstratosdb)
  comparacao['FALTANTES'].append(nfaltantes)

#imprimindo tabela
display(pd.DataFrame(comparacao))

"""Com base nos dois arquivos disponibilizados (base_originacao.csv e base_carteira.csv), crie um sumário executivo da cooperativa B, podendo fazer uso dos resultados obtidos nos exercícios anteriores."""

cooperativa_escolhida = 'B' #escolhendo cooperativa

#pegando dados pertinentes a cooperativa
base_originacao_coop = base_originacao[base_originacao['COOPERATIVA'] == cooperativa_escolhida]
base_carteira_coop = base_carteira[base_carteira['COOPERATIVA'] == cooperativa_escolhida]
base_drop_coop = base_originacao_coop.drop(columns=['COOPERATIVA','CPF','CONTA','DSPRODUTO','DTCONTRATO','VLCONTRATO'])
base_unificada_coop = pd.merge(base_carteira_coop, base_drop_coop, on='CONTRATO', how='left')
base_originacao_coop['ANO'] = base_originacao_coop['DTCONTRATO'].dt.strftime('%Y') #incluindo coluna de ano

anos = base_originacao_coop['ANO'].astype(str).unique().tolist() #coletando a lista de anos

cpf_contratos = pd.DataFrame(base_originacao_coop.groupby('CPF').agg({'ANO':'first'})) #coletando todos os cpfs

#criação das tabelas
contratos_ano = ({
    'ANO': [],
    'CONTRATOS': [],
    'NVCPF': [],
    'TOTALSALDO': []
})

coop_ano_2021 = ({
    'DATA': [],
    'SOMAVALORES': [],
    'TOTALCAPTURAOS': [],
    'TINADIMPLENTES': []
})

#coletando dados das contratações por ano
for ano in anos:

  originacao_coop_ano = base_originacao_coop[base_originacao_coop['ANO'] == ano]
  contratos_coop_ano = originacao_coop_ano.shape[0]
  totalsaldo_coop_ano = originacao_coop_ano['VLCONTRATO'].sum()
  ncpfano = cpf_contratos[cpf_contratos['ANO'] == ano].shape[0]


  contratos_ano['ANO'].append(ano)
  contratos_ano['CONTRATOS'].append(contratos_coop_ano)
  contratos_ano['NVCPF'].append(ncpfano)
  contratos_ano['TOTALSALDO'].append(totalsaldo_coop_ano)

#coletando dados dos dias de 2021
for data in lista_dias:
  dados_dia_coop = base_carteira_coop[base_carteira_coop['DTBASE'] == data]
  somavalores_coop = dados_dia_coop['SDDEVEDOR'].sum()
  totalcapturados_coop = dados_dia_coop.shape[0]
  inadimplentes_coop = dados_dia_coop[dados_dia_coop['QTDIASATRASO'] > 90].shape[0]
  tinadimplentes_coop = (inadimplentes_coop * 100) / totalcapturados_coop


  coop_ano_2021['DATA'].append(data[5:7])
  coop_ano_2021['SOMAVALORES'].append(somavalores_coop)
  coop_ano_2021['TOTALCAPTURAOS'].append(totalcapturados_coop)
  coop_ano_2021['TINADIMPLENTES'].append(round(tinadimplentes_coop,2))

devedores90_coop = base_unificada_coop[base_unificada_coop['QTDIASATRASO'] > 90]
devedores365_coop = base_unificada_coop[base_unificada_coop['QTDIASATRASO'] > 365]

tdevedores90_coop = f'{round((devedores90_coop.shape[0]*100)/base_unificada_coop.shape[0],2)}%' #verificando a porcentagem media de atrasados da cooperativa
tdevedores365_coop = f'{round((devedores365_coop.shape[0]*100)/base_unificada_coop.shape[0],2)}%' #verificando a porcentagem media de atrasados de risco da cooperativa


contratos_ano = pd.DataFrame(contratos_ano)
contratos_ano = contratos_ano.sort_values(by=['ANO'])
coop_ano_2021 = pd.DataFrame(coop_ano_2021)
coop_ano_2021 = coop_ano_2021.sort_values(by=['DATA'])

#imprimindo as tabelas

plt.figure(figsize=(10, 6))

plt.bar(contratos_ano['ANO'], contratos_ano['NVCPF'])
plt.xlabel('ANO')
plt.ylabel('QUANTIDADE')
plt.title('NÚMERO DE CPFs NOVOS')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.bar(contratos_ano['ANO'], contratos_ano['CONTRATOS'])
plt.xlabel('ANO')
plt.ylabel('QUANTIDADE')
plt.title('NÚMERO DE CONTRATOS EFETUADOS POR MÊS')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.bar(contratos_ano['ANO'], contratos_ano['TOTALSALDO'])
plt.xlabel('ANO')
plt.ylabel('REGISTROS IDENTIFICADOS')
plt.title('TOTAL DE REGISTROS CAPTURADOS NO MÊS')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.plot(coop_ano_2021['DATA'], coop_ano_2021['TINADIMPLENTES'], label='line 1', marker='o')
plt.xlabel('DATA')
plt.ylabel('TAXA INADIMPLÊNCIA')
plt.title('TAXA DE INADIMPLÊNCIA POR MÊS')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.bar(coop_ano_2021['DATA'], coop_ano_2021['TOTALCAPTURAOS'])
plt.xlabel('DATA')
plt.ylabel('CONTAS CAPTURADAS')
plt.title('TOTAL DE CONTAS CAPTURADAS')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.plot(coop_ano_2021['DATA'], coop_ano_2021['SOMAVALORES'], label='line 1', marker='o')
plt.xlabel('DATA')
plt.ylabel('SALDO DEVEDOR')
plt.title('TOTAL DE SALDO DEVEDOR')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

display(contratos_ano)
display(coop_ano_2021)
print(f'{coop_ano_2021["SOMAVALORES"].mean()}')
print(f'{tdevedores90_coop} em média estão 90 dias atrasados durante o ano, sendo {tdevedores365_coop} em risco com atraso de mais de 365 dias')
print(f'A soma dos contratos é R${base_originacao_coop["VLCONTRATO"].sum()}')
print(f'A média dos contratos é R${base_originacao_coop["VLCONTRATO"].mean()}')